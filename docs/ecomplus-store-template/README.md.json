{
    "repo": "ecomplus-store-template",
    "path": "README.md",
    "markdown": "# Storefront theme\n\n## Pages\n1. [Storefront theme](.\/)\n2. [Template structure](.\/structure\/)\n3. [JavaScript methods API](.\/methods\/)\n4. [Implement a search engine](.\/search\/)\n\n## Summary\n1. [Introduction](#introduction)\n2. [Getting started](#getting-started)\n3. [Guide](#guide)\n    * [App main element](#app-main-element)\n        * [Specifying language](#specifying-language)\n        * [Specifying store](#specifying-store)\n    * [Vue instances](#vue-instances)\n        * [Store API objects](#store-api-objects)\n            * [Object types](#object-types)\n            * [Store info sample](#store-info-sample)\n            * [Basic product sample](#basic-product-sample)\n            * [List of objects](#list-of-objects)\n            * [List of categories sample](#list-of-categories-sample)\n        * [Search API objects](#search-api-objects)\n            * [List items](#list-items)\n            * [Products list sample](#products-list-sample)\n            * [Search products by keyword](#search-products-by-keyword)\n            * [List items from category or brand](#list-items-from-category-or-brand)\n            * [List of specific products](#list-of-specific-products)\n        * [List products from collection](#list-products-from-collection)\n    * [Recommended CSS](#recommended-css)\n\n{% raw %}\n\n# Introduction\nThis document is intended to list predefined mustache tags,\nHTML classes and attributes, and\n<a href=\".\/methods\/\">JavaScript methods<\/a>\n(functions) for layout rendering with\n<a href=\"https:\/\/github.com\/ecomclub\/ecomplus-store-render\" target=\"_blank\">ecomplus-store-render<\/a>.\n\n**It's possible to use any HTML template for E-Com Plus storefront.**\nAfter reading this documentation, you will be able to customize a theme\n(editing some elements only) or start a new theme from scratch.\n\nIf you want to create a new theme from scratch, be sure to follow\n<a href=\".\/structure\/\">this template structure<\/a>.\n\nE-Com Plus storefront uses\n<a href=\"https:\/\/vuejs.org\/v2\/guide\/\" target=\"_blank\">Vue.js 2<\/a> framework, so\nstore template specifications follow the\n<a href=\"https:\/\/vuejs.org\/v2\/guide\/syntax.html\" target=\"_blank\">Vue template syntax<\/a>.\n\n> After reading the docs,\n> <a href=\"https:\/\/github.com\/ecomclub\/ecomplus-store-template\/wiki\" target=\"_blank\">visit the Wiki<\/a>\n> to make suggestions or contribute with documentation content and examples.\n> If you need help, feel free to\n> <a href=\"https:\/\/github.com\/ecomclub\/ecomplus-store-template\/issues\" target=\"_blank\">open a new issue<\/a>.\n\n# Getting started\nYour HTML file must include\n<a href=\"https:\/\/vuejs.org\/v2\/\" target=\"_blank\">Vue<\/a>,\n<a href=\"https:\/\/github.com\/ecomclub\/ecomplus-sdk-js\" target=\"_blank\">storefront JS SDK<\/a>\nand the\n<a href=\"https:\/\/github.com\/ecomclub\/ecomplus-store-render\" target=\"_blank\">layout renderer app<\/a>.\nYou can include storefront \"all in one\" JS file **(recommended)**:\n\n```html\n<script src=\"https:\/\/ecvol.com\/js\/storefront@1\/storefront.min.js\"><\/script>\n```\n\nOr import the scripts one by one (not recommended):\n\n```html\n<script src=\"https:\/\/cdn.jsdelivr.net\/npm\/vue@2\/dist\/vue.min.js\"><\/script>\n<script src=\"https:\/\/cdn.jsdelivr.net\/npm\/ecomplus-sdk@1\/dist\/sdk.min.js\"><\/script>\n<script src=\"https:\/\/cdn.jsdelivr.net\/npm\/ecomplus-render@1\/dist\/render.min.js\"><\/script>\n```\n\nThen, start the layout rendering with JS below:\n\n```javascript\nEcom.init()\n```\n\nThe scripts should be loaded after the HTML content of the page,\nso you have to put them before `<\/body>` tag,\nwe also recommend to load them before other scripts,\nsuch as jQuery lib. Final example:\n\n```html\n<body>\n  <!-- HTML content -->\n  <script src=\"https:\/\/ecvol.com\/js\/storefront@1\/storefront.min.js\"><\/script>\n  <script>\n    Ecom.init()\n  <\/script>\n  <!-- Optionally, other JS -->\n<\/body>\n```\n\n# Guide\nHTML classes used by this library will be named with the prefix `_ecom-`,\ndata attributes may be used together with the classes in the elements.\n\n## App main element\nYour HTML must have an element\nwith class `_ecom-store`, it's **required**.\n\nAll Vue template must be inside this element,\nincluding all mustache tags and Vue HTML attributes,\nso probably it will be the `<body>`, but it's not a rule, you can use\na `<div>`, `<span>` or any other:\n\n```html\n<body class=\"_ecom-store\">\n  <!-- HTML CODE -->\n<\/body>\n```\n\n### Specifying store\nBy default, store will be defined in function of the site domain,\nbut you can also use the attributes `data-store` and `data-id`\nwith your _Store ID_ and _Store Object ID_ respectively:\n\n```html\n<div class=\"_ecom-store\" data-store=\"100\" data-id=\"5a674f224e0dcec2c3353d9d\">\n```\n\nIt's useful if the template is designed for one specific store only,\nor if you want to work with multiple stores in the same storefront.\n\n### Specifying language\nIf you don't want to use the store default language,\nyou can use the attribute `data-lang`:\n\n```html\n<div class=\"_ecom-store\" data-lang=\"en_us\">\n```\n\nUse lowercase letters and separate lang of country (if any) by underline,\neg.: `pt_br`, `en_us`, `it`, `es`.\n\n## Vue instances\nEach HTML element with class `_ecom-el` will be an\n<a href=\"https:\/\/vuejs.org\/v2\/guide\/instance.html\" target=\"_blank\">Vue instance<\/a>.\nIt represents an object declaration, preceded of a REST API GET request.\n\nInside `._ecom-el` elements you can use mustache tags and any\n<a href=\"https:\/\/vuejs.org\/v2\/guide\/syntax.html\" target=\"_blank\">Vue template<\/a>\nattributes.\n\n### Store API objects\n<a href=\"https:\/\/ecomstore.docs.apiary.io\/\" target=\"_blank\">Store API<\/a> requests\nare rendered from `._ecom-el` elements\nwith the attributes below:\n\n| Attribute   | Description |\n| :---:       | :---: |\n| `data-type` | Type of object, with one of [these values](#object-types) |\n| `data-id`   | API Object ID, the `_id` of the object you are getting from the API _(optional)_ |\n\nIn almost all cases, you will not create an HTML for each object,\nfor example, you will create only one HTML file for all products,\nnot one per product.\nIn these cases it's not possible to specify `data-id` (it's dynamic),\nlet the element without this attribute,\nID will be defined in function of page URL (slug).\n\nThe\n<a href=\"https:\/\/vuejs.org\/v2\/guide\/instance.html#Data-and-Methods\" target=\"_blank\">instance data<\/a>\nwill be an object with `body` property, `body` is the object returned from\n<a href=\"https:\/\/ecomstore.docs.apiary.io\/\" target=\"_blank\">Store API<\/a>,\nwith the same properties.\n\n#### Object types\nPossible values for `data-type`:\n\n| Type          | Object model |\n| :---:         | :---: |\n| `product`     | [Reference](https:\/\/ecomstore.docs.apiary.io\/#reference\/products\/product-object) |\n| `brand`       | [Reference](https:\/\/ecomstore.docs.apiary.io\/#reference\/brands\/brand-object) |\n| `category`    | [Reference](https:\/\/ecomstore.docs.apiary.io\/#reference\/categories\/category-object) |\n| `collection`  | [Reference](https:\/\/ecomstore.docs.apiary.io\/#reference\/collections\/collection-object) |\n| `customer`    | [Reference](https:\/\/ecomstore.docs.apiary.io\/#reference\/customers\/customer-object) |\n| `cart`        | [Reference](https:\/\/ecomstore.docs.apiary.io\/#reference\/carts\/cart-object) |\n| `order`       | [Reference](https:\/\/ecomstore.docs.apiary.io\/#reference\/orders\/order-object) |\n| `application` | [Reference](https:\/\/ecomstore.docs.apiary.io\/#reference\/applications\/application-object) |\n| `store`       | [Reference](https:\/\/ecomstore.docs.apiary.io\/#reference\/stores\/store-object) |\n\n#### Store info sample\nThe example below shows some of the current store information:\n\n```html\n<div class=\"footer _ecom-el\" data-type=\"store\">\n  <div class=\"logo\" v-if=\"body.logo\">\n    <img v-bind:src=\"body.logo.url\" v-bind:alt=\"body.logo.alt\" v-bind:width=\"width(body.logo)\">\n  <\/div>\n  <h2 class=\"store-title\"> {{ body.name }} <\/h2>\n  <p> {{ body.description }} <\/p>\n<\/div>\n```\n\nIn the example above, Vue data (inside mustache tags and `v-*` attributes) have the\n<a href=\"https:\/\/ecomstore.docs.apiary.io\/#reference\/stores\/specific-store\" target=\"_blank\">\nproperties listed here<\/a>,\nfollowing the store object model, but only with public data.\n\n#### Basic product sample\nThe example below is a simple implementation of a product page:\n\n```html\n<div class=\"_ecom-el\" data-type=\"product\">\n  <div v-bind:class=\"'prod-' + body.sku\" v-if=\"body.visible\">\n    <ul>\n      <li v-for=\"picture in body.pictures\">\n        <span v-if=\"picture.big\">\n          <img v-if=\"picture.zoom\" v-bind:src=\"picture.big.url\" v-bind:alt=\"picture.big.alt\"\n            v-bind:data-zoom=\"picture.zoom.url\" \/>\n          <img v-else v-bind:src=\"picture.big.url\" v-bind:alt=\"picture.big.alt\" \/>\n        <\/span>\n      <\/li>\n    <\/ul>\n    <a v-bind:href=\"body.slug\">\n      <h1> {{ name() }} <\/h1>\n    <\/a>\n    <p class=\"price-block\">\n      <span v-if=\"onPromotion()\">\n        {{ body.currency_symbol }}\n        <strong class=\"price\"> {{ formatMoney(body.price) }} <\/strong>\n        <span class=\"base-price\"> {{ formatMoney(body.base_price) }} <\/span>\n      <\/span>\n      <span v-else>\n        {{ body.currency_symbol }} <strong class=\"price\"> {{ formatMoney(price()) }} <\/strong>\n      <\/span>\n    <\/p>\n    <div v-if=\"body.available\">\n      <button v-if=\"inStock()\" class=\"buy\"> Buy <\/button>\n      <div class=\"no-stock\" v-else> Out of stock <\/div>\n    <\/div>\n    <div class=\"description\">\n      {{ body.body_html }}\n    <\/div>\n  <\/div>\n<\/div>\n```\n\nIf you are creating the HTML file for a specific product only,\nor embedding one product inside a custom page, you must set `data-id`\nwith the product ID:\n\n```html\n<div class=\"_ecom-el\" data-type=\"product\" data-id=\"123a5432109876543210cdef\">\n```\n\nVue data (inside mustache tags and `v-*` attributes) follows this\n<a href=\"https:\/\/ecomstore.docs.apiary.io\/#reference\/products\/product-object\" target=\"_blank\">object reference<\/a>.\n\nNote that you can use similar code for other types of objects (API resources).\n\n#### List of objects\nIt's possible to render a list of Store API\n<a href=\"https:\/\/ecomstore.docs.apiary.io\/#reference\/categories\/all-categories\" target=\"_blank\">categories<\/a>,\n<a href=\"https:\/\/ecomstore.docs.apiary.io\/#reference\/brands\/all-brands\" target=\"_blank\">brands<\/a> or\n<a href=\"https:\/\/ecomstore.docs.apiary.io\/#reference\/collections\/all-collections\" target=\"_blank\">collections<\/a>,\nto do that, you must add the attribute `data-list-all` to the `._ecom-el` element.\n\nThis is available only for elements with one of following `data-type`:\n\n| Type          | Object model |\n| :---:         | :---: |\n| `brand`       | [Reference](https:\/\/ecomstore.docs.apiary.io\/#reference\/brands\/all-brands) |\n| `category`    | [Reference](https:\/\/ecomstore.docs.apiary.io\/#reference\/categories\/all-categories) |\n| `collection`  | [Reference](https:\/\/ecomstore.docs.apiary.io\/#reference\/collections\/all-collections) |\n\n#### List of categories sample\nThe example below is a simple implementation of a list of categories,\nup to 1000 objects, with random order,\nusing <a href=\"https:\/\/vuejs.org\/v2\/guide\/list.html\" target=\"_blank\">Vue list<\/a>:\n\n```html\n<ul class=\"_ecom-el\" data-type=\"category\" data-list-all=\"true\">\n  <li v-for=\"category in body.result\">\n    <a v-bind:href=\"category.slug\">\n      {{ category.name }}\n    <\/a>\n  <\/li>\n<\/ul>\n```\n\n##### Sort list alphabetically\nBy default, the objects are randomly ordered on the list,\nif you want alphabetical order, you can use the `alphabeticalSort` pre-built method:\n\n```html\n<li v-for=\"category in alphabeticalSort(body.result)\">\n```\n\n### Search API objects\n<a href=\"https:\/\/ecomsearch.docs.apiary.io\/\" target=\"_blank\">Search API<\/a> requests\nare rendered from `._ecom-el` elements\nwith the `data-type` equal to `items` or `terms`,\nand other attributes depending of search case.\n\nThe\n<a href=\"https:\/\/vuejs.org\/v2\/guide\/instance.html#Data-and-Methods\" target=\"_blank\">Vue instance data<\/a>\nwill be an object with `body` property, `body` is the object returned from\n<a href=\"https:\/\/ecomsearch.docs.apiary.io\/\" target=\"_blank\">Search API<\/a>,\nwith the same properties.\n\n#### List items\nTo list products, `data-type` must be equal to `items`.\nYou can get more info and example of returned object from\n<a href=\"https:\/\/ecomsearch.docs.apiary.io\/#reference\/items\" target=\"_blank\">API reference<\/a>.\n\nThe `._ecom-el` element must also have the following attributes:\n\n| Attribute         | Description |\n| :---:             | :---: |\n| `data-type`       | Equal to `items` |\n| `data-term`       | Searched keyword _(optional)_ |\n| `data-from`       | Results offset number _(optional)_ |\n| `data-size`       | Maximum number of results _(optional)_ |\n| `data-sort`       | Results ordering, one of [these enumered values](#sort-items-search-result) _(optional)_ |\n| `data-ids`        | Filter by specific products IDs separated by `,` _(optional)_ |\n| `data-brands`     | Filter by list of brands IDs separated by `,` _(optional)_ |\n| `data-categories` | Filter by list of categories IDs separated by `,` _(optional)_ |\n| `data-price-min`  | Filter by minimum price _(optional)_ |\n| `data-price-max`  | Filter by maximum price _(optional)_ |\n| `data-spec-*`     | Filter by product specification _(optional)_ |\n\n#### Products list sample\nThe example below is a simple implementation of a list of trending products,\nusing <a href=\"https:\/\/vuejs.org\/v2\/guide\/list.html\" target=\"_blank\">Vue list<\/a>:\n\n```html\n<div class=\"row _ecom-el\" data-type=\"items\">\n  <div class=\"col-md-2\" v-for=\"item in body.hits.hits\">\n    <div v-if=\"body = item._source\" class=\"item\">\n      <div v-if=\"body.pictures && body.pictures[0] && body.pictures[0].normal\" class=\"item-img\">\n        <img v-bind:src=\"body.pictures[0].normal.url\" v-bind:alt=\"body.pictures[0].normal.alt\" \/>\n      <\/div>\n      <a v-bind:href=\"body.slug\">\n        <h3> {{ name(body) }} <\/h3>\n      <\/a>\n      <p class=\"price-block\">\n        <span v-if=\"onPromotion(body)\">\n          {{ body.currency_symbol }}\n          <strong class=\"price\"> {{ formatMoney(body.price) }} <\/strong>\n          <span class=\"base-price\"> {{ formatMoney(body.base_price) }} <\/span>\n        <\/span>\n        <span v-else>\n          {{ body.currency_symbol }}\n          <strong class=\"price\"> {{ formatMoney(price(body)) }} <\/strong>\n        <\/span>\n      <\/p>\n      <span v-if=\"body.available\">\n        <button v-if=\"inStock()\" class=\"buy\"> Buy <\/button>\n        <span class=\"no-stock\" v-else> Out of stock <\/span>\n      <\/span>\n    <\/div>\n  <\/div>\n<\/div>\n```\n\nIt's possible to specify the maximum number of listed items with `data-size`,\nthe example below will list up to 12 most popular items:\n\n```html\n<div class=\"_ecom-el\" data-type=\"items\" data-size=\"12\">\n```\n\nFor pagination, you should use data-from (offset) together with data-size (limit).\nThe example below will list up to 12 items, starting from the 24\u00ba,\nso, from 24\u00ba to 36\u00ba:\n\n```html\n<div class=\"_ecom-el\" data-type=\"items\" data-from=\"24\" data-size=\"12\">\n```\n\n##### Sort items search result\nBy default, items will be ordered by popularity (number of page views),\nbut you can use custom sort with `data-sort` attribute:\n\n```html\n<div class=\"_ecom-el\" data-type=\"items\" data-sort=\"1\">\n```\n\nIt must have one of the number values below:\n\n| Enum | Description |\n| :--: | :---: |\n| `1`  | Sort by sales, products that sells more appear first |\n| `2`  | Sort by price ascending, products with lowest price appear first |\n| `3`  | Sort by price descending, products with highest price appear first |\n| `4`  | Sort by creation date, new products appear first |\n\n#### Search products by keyword\nTo find products searching by name and\/or keywords, you can use `data-term`:\n\n```html\n<div class=\"_ecom-el\" data-type=\"items\" data-term=\"tshirt\">\n```\n\n<a href=\".\/search\/\">Here<\/a>\nyou can check an complete example of store search engine implementation.\n\n#### Filter items by specifications\nIt's possible to filter the resultant items list by product specs,\nadding attributes of type `data-spec-*`, where the wildcard must be replaced\nby the specification (property name):\n\n```html\n<div class=\"_ecom-el\" data-type=\"items\" data-spec-colors=\"Blue\" data-spec-size=\"M\">\n```\n\n#### List items from category or brand\nTo list products from specific categories you should use\n`data-categories` attribute.\n\nFollowing example will list items from one category only, but you can\nspecify more than one by separating categories IDs with `,` (comma):\n\n```html\n<div class=\"_ecom-el\" data-type=\"items\" data-categories=\"f10000000000000000000001\">\n```\n\nSimilar to categories, you can list products from specific brands using\n`data-brands` attribute:\n\n```html\n<div class=\"_ecom-el\" data-type=\"items\" data-brands=\"a10000000000000000000001\">\n```\n\n#### List of specific products\nYou can also list specific items using the `data-ids` attribute, where\nyou should put the IDs of respective products separated by comma:\n\n```html\n<div class=\"_ecom-el\" data-type=\"items\" data-ids=\"1234567890abcdef01291510,1234567890abcdef01291511\">\n```\n\nNote that you can combine the attributes from all above\nsearch and list examples to fit your needs.\n\n### List products from collection\nTo list products of a collection you have to use both\n[Store API](#store-api-objects) and [Search API](#search-api-objects).\n\nThe notation is such as the example below:\n\n```html\n<div class=\"_ecom-el\" data-type=\"collection\" data-id=\"c92000000000000000001111\"\n  data-list=\"products\" data-size=\"12\">\n  <a v-bind:href=\"body.slug\">\n    <h3 class=\"coll-name\"> {{ body.name }} <\/h3>\n  <\/a>\n  <ul>\n    <li v-for=\"item in body.hits.hits\">\n      <div v-if=\"body = item._source\" class=\"item\">\n        <div v-if=\"body.pictures && body.pictures[0] && body.pictures[0].normal\" class=\"item-img\">\n          <img v-bind:src=\"body.pictures[0].normal.url\" v-bind:alt=\"body.pictures[0].normal.alt\" \/>\n        <\/div>\n        <a v-bind:href=\"body.slug\">\n          <h4> {{ name(body) }} <\/h4>\n        <\/a>\n        <p> SKU: {{ body.sku }} <\/p>\n        <p class=\"price-block\">\n          <span v-if=\"onPromotion(body)\">\n            {{ body.currency_symbol }}\n            <strong class=\"price\"> {{ formatMoney(body.price) }} <\/strong>\n            <span class=\"base-price\"> {{ formatMoney(body.base_price) }} <\/span>\n          <\/span>\n          <span v-else>\n            {{ body.currency_symbol }}\n            <strong class=\"price\"> {{ formatMoney(price(body)) }} <\/strong>\n          <\/span>\n        <\/p>\n        <button v-if=\"inStock()\" class=\"buy\"> Buy <\/button>\n        <span class=\"no-stock\" v-else> Out of stock <\/span>\n      <\/div>\n    <\/li>\n  <\/ul>\n<\/div>\n```\n\nIn these cases you must use `data-type` and `data-id` as expected\nfor a [Store API object](#store-api-objects).\nYou also have to use the attribute `data-list` with\nvalue `products`, by doing this, you will be listing the\ncollection products by IDs such as a [Search API object](#search-api-objects).\n\nIn addition, you can use the other\n[attributes for a Search API items list](#list-items),\nsuch as the `data-size` used in the above example.\n\n## Recommended CSS\nAfter the renderization of each `._ecom-el` element,\nthe class `rendered` is automatically added, to hide the non-rendered elements\nwe recommend to use the following styles:\n\n```css\n._ecom-el {\n  opacity: 0;\n}\n._ecom-el.rendered {\n  opacity: 1;\n}\n```\n\nIf you want to use fade effect:\n\n```css\n._ecom-el {\n  opacity: 0;\n}\n._ecom-el.rendered {\n  opacity: 1;\n  animation: fadein 1s;\n  -moz-animation: fadein 1s;\n  -webkit-animation: fadein 1s;\n  -o-animation: fadein 1s;\n}\n@keyframes fadein {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n\/* Firefox *\/\n@-moz-keyframes fadein {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n\/* Safari and Chrome *\/\n@-webkit-keyframes fadein {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n\/* Opera *\/\n@-o-keyframes fadein {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n```\n\nOf course you can change the animation time from 1s to what you want.\n\n{% endraw %}\n"
}
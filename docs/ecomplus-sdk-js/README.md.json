{
    "repo": "ecomplus-sdk-js",
    "path": "README.md",
    "markdown": "# ecomplus-sdk-js\n\n[![npm version](https:\/\/img.shields.io\/npm\/v\/ecomplus-sdk.svg)](https:\/\/www.npmjs.org\/ecomplus-sdk)\n[![license mit](https:\/\/img.shields.io\/badge\/License-MIT-yellow.svg)](https:\/\/opensource.org\/licenses\/MIT)\n\nJS library for E-Com Plus storefront with methods to access public resources from\n[Store API](https:\/\/ecomstore.docs.apiary.io),\n[Graphs API](https:\/\/ecomgraphs.docs.apiary.io) and\n[Search API](https:\/\/ecomsearch.docs.apiary.io).\n\n__This library implements only GET requests to public resources, so there aren't authentication.__\n\nInclude minified script via CDN:\n\n```html\n<script src=\"https:\/\/cdn.jsdelivr.net\/npm\/ecomplus-sdk@1\/dist\/sdk.min.js\"><\/script>\n```\n\nOr install [npm package](https:\/\/www.npmjs.com\/package\/ecomplus-sdk):\n\n`npm install --save ecomplus-sdk`\n\n# Summary\n\n1. [Getting Started](#getting-started)\n    * [Callback](#callback)\n    * [Initialize](#initialize)\n2. [Methods](#methods)\n    * [Get Store](#get-store)\n    * [Get Product](#get-product)\n    * [Get Product By Sku](#get-product-by-sku)\n    * [Get Order](#get-order)\n    * [Get Cart](#get-cart)\n    * [Get Customer](#get-customer)\n    * [Get Application](#get-application)\n    * [Get Brand](#get-brand)\n    * [Find Brand By Slug](#find-brand-by-slug)\n    * [List Brands](#list-brands)\n    * [Get Category](#get-category)\n    * [Find Category By Slug](#find-category-by-slug)\n    * [List Categories](#list-categories)\n    * [Get Collections](#get-collections)\n    * [Find Collection By Slug](#find-collection-by-slug)\n    * [List Collections](#list-collections)\n    * [Search Products](#search-products)\n        - [Term](#term)\n        - [Sort](#sort)\n        - [Specs](#specs)\n        - [IDs](#ids)\n        - [Brands](#brands)\n        - [Categories](#categories)\n        - [Prices](#prices)\n        - [Custom DSL](#custom-dsl)\n    * [Get Recommended Products](#get-recommended-products)\n    * [Get Related Products](#get-related-products)\n    * [Map By Slug](#map-by-slug)\n    * [Map By Window URI](#map-by-window-uri)\n    * [Get Any By ID](#get-any-by-id)\n\n# Getting Started\nThe library declares an object called `EcomIo`,\nwith methods (object properties) to read public resources from the APIs.\n\n## Callback\nAll the methods are functions with _callback_ as his first argument,\nit's the function that you should pass to treat the request response.\n`callback` function must have two arguments:\n\n| Arguments | Type                   | Required |\n| :---:     | :---:                  | :---: |\n| err       | `Error` object or null | :heavy_check_mark: |\n| body      | Object or null         | :heavy_check_mark: |\n\nIf the method runs correctly,\n`err` will be null, otherwise, it will be an\n[Error object](https:\/\/developer.mozilla.org\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/Error).\n\nThe response object from the APIs is\nparsed and returned in `body`, it's null if no\nJSON response can be captured.\n\n## Initialize\n`init(callback, StoreId, StoreObjectId, Logger)`\n\nBefore you call the other methods you need to initialize the library.\n\nIn client JS (browser) `StoreId` is not required,\nif undefined, it will be set in function of site domain name.\n\nYou have to define `StoreId`,\nand should also define `StoreObjectId`,\nif using SDK on backend with Node.js, or if you are embedding\nthe store in another external site, such as a blog, not in the storefront.\n\nThe `Logger` argument is not required, but you can pass a\n[Console object](https:\/\/developer.mozilla.org\/docs\/Web\/API\/Console),\nwith properties `log` and `error`, if you want to save output on file.\n\n| Arguments     | Type             | Required |\n| :---:         | :---:            | :---: |\n| callback      | Function         | :heavy_check_mark: |\n| StoreId       | Number           | |\n| StoreObjectId | String           | |\n| Logger        | `Console` object | |\n\n```javascript\n\/\/ storefront on browser\nEcomIo.init(callback)\n```\n\n```javascript\n\/\/ Node.js or not storefront site\nEcomIo.init(callback, 100, '5a674f224e0dcec2c3353d9d')\n```\n\n# Methods\nThe object returned from almost all methods is the response body of Store API endpoints,\nso if you want to see more examples, you should access the\n[API documentation](https:\/\/ecomstore.docs.apiary.io\/#).\n\n## Get Store\n`getStore(callback, id)`\n\n[API reference](https:\/\/ecomstore.docs.apiary.io\/#reference\/stores\/specific-store\/read-store)\n\n> Method to read a store object by the ID.\n\n| Arguments | Type     | Required |\n| :---:     | :---:    | :---: |\n| callback  | Function | :heavy_check_mark: |\n| id        | String   | |\n\nThe `id` is not required only if\n[`StoreObjectId`](#initialize) is set, then this method\nwill get the object of current store.\n\n`StoreObjectId` will be set automaticly\nif SDK is running on storefront with browser.\n\n```javascript\n\/\/ get current store object\n\/\/ uses saved StoreObjectId\nEcomIo.getStore(callback)\n```\n\n```javascript\n\/\/ specific store by object id\nEcomIo.getStore(callback, '5a674f224e0dcec2c3353d9d')\n```\n\n## Get Product\n`getProduct(callback, id)`\n\n[API reference](https:\/\/ecomstore.docs.apiary.io\/#reference\/products\/specific-product\/read-product)\n\n> Method to read a product object by the ID.\n\n| Arguments | Type     | Required |\n| :---:     | :---:    | :---: |\n| callback  | Function | :heavy_check_mark: |\n| id        | String   | :heavy_check_mark: |\n\n```javascript\nEcomIo.getProduct(callback, '123a5432109876543210cdef')\n```\n\nExample of returned `body`:\n\n```javascript\n{\n  '_id': '123a5432109876543210cdef',\n  'store_id': 100,\n  'sku': 's-MP_2B4',\n  'name': 'Mens Pique Polo Shirt',\n  'keywords': [\n    'tshirt',\n    't-shirt',\n    'man'\n  ],\n  'price': 42.9,\n  'base_price': 60,\n  'quantity': 100,\n  \/\/ ...\n}\n```\n\n## Get Product By Sku\n`getProductBySku(callback, sku)`\n\n> Similar to [`getProduct`](#get-product), with the same return,\nbut here you pass the product SKU instead of ID.\n\n| Arguments | Type     | Required |\n| :---:     | :---:    | :---: |\n| callback  | Function | :heavy_check_mark: |\n| sku       | String   | :heavy_check_mark: |\n\n```javascript\nEcomIo.getProductBySku(callback, 'COD1')\n```\n\n## Get Order\n`getOrder(callback, id)`\n\n[API reference](https:\/\/ecomstore.docs.apiary.io\/#reference\/orders\/specific-order\/read-order)\n\n> Method to read an order object by the ID.\n\n| Arguments | Type     | Required |\n| :---:     | :---:    | :---: |\n| callback  | Function | :heavy_check_mark: |\n| id        | String   | :heavy_check_mark: |\n\n```javascript\nEcomIo.getOrder(callback, 'fe1000000000000000000005')\n```\n\n## Get Cart\n`getCart(callback, id)`\n\n[API reference](https:\/\/ecomstore.docs.apiary.io\/#reference\/carts\/specific-cart\/read-cart)\n\n> Method to read a cart object by the ID.\n\n| Arguments | Type     | Required |\n| :---:     | :---:    | :---: |\n| callback  | Function | :heavy_check_mark: |\n| id        | String   | :heavy_check_mark: |\n\n```javascript\nEcomIo.getCart(callback, '2ca000000000000000000003')\n```\n\n## Get Customer\n`getCustomer(callback, id)`\n\n[API reference](https:\/\/ecomstore.docs.apiary.io\/#reference\/customers\/specific-customer\/read-customer)\n\n> Method to read a customer object by the ID.\n\n| Arguments | Type     | Required |\n| :---:     | :---:    | :---: |\n| callback  | Function | :heavy_check_mark: |\n| id        | String   | :heavy_check_mark: |\n\n```javascript\nEcomIo.getCustomer(callback, '3c1000000000000000000003')\n```\n\n## Get Application\n`getApplication(callback, id)`\n\n[API reference](https:\/\/ecomstore.docs.apiary.io\/#reference\/applications\/specific-application\/read-application)\n\n> Method to read an application object by the ID.\n\n| Arguments | Type     | Required |\n| :---:     | :---:    | :---: |\n| callback  | Function | :heavy_check_mark: |\n| id        | String   | :heavy_check_mark: |\n\n```javascript\nEcomIo.getApplication(callback, '42aa00000000000000000111')\n```\n\n## Get Brand\n`getBrand(callback, id)`\n\n[API reference](https:\/\/ecomstore.docs.apiary.io\/#reference\/brands\/specific-brand\/read-brand)\n\n> Method to read a brand object by the ID.\n\n| Arguments | Type     | Required |\n| :---:     | :---:    | :---: |\n| callback  | Function | :heavy_check_mark: |\n| id        | String   | :heavy_check_mark: |\n\n```javascript\nEcomIo.getBrand(callback, 'a10000000000000000000001')\n```\n\n## Find Brand By Slug\n`findBrandBySlug(callback, slug)`\n\n[API reference](https:\/\/ecomstore.docs.apiary.io\/#reference\/brands\/all-brands\/find-brands)\n\n> Method to find and read a brand by the slug.\n\n| Arguments | Type     | Required |\n| :---:     | :---:    | :---: |\n| callback  | Function | :heavy_check_mark: |\n| slug      | String   | :heavy_check_mark: |\n\n```javascript\nEcomIo.findBrandBySlug(callback, 'brand-four')\n```\n\n## List Brands\n`listBrands(callback, offset, limit, sort, fields, customQuery)`\n\n[API reference](https:\/\/ecomstore.docs.apiary.io\/#reference\/brands\/all-brands\/pagination-and-ordering)\n\n> Method to list the store brands.\n\n| Arguments   | Type     | Required |\n| :---:       | :---:    | :---: |\n| callback    | Function | :heavy_check_mark: |\n| offset      | Number   | |\n| limit       | Number   | |\n| sort        | Number   | |\n| fields      | Array    | |\n| customQuery | String   | |\n\nOffset, limit, sort and fields are\n[URL parameters](https:\/\/ecomstore.docs.apiary.io\/#introduction\/overview\/url-params) (metadata)\nfor pagination and ordering,\nyou can use customQuery to query by particular object properties.\nDefault enumered `sort` options:\n\n| Number | Usage |\n| :---:  | :---: |\n| 1      | Sort by name ascending |\n| 2      | Sort by name descending |\n| 3      | Sort by creation date ascending |\n| 4      | Sort by creation date descending |\n| 5      | Sort by popularity descending |\n\n```javascript\nEcomIo.listBrands(callback)\n```\n\n```javascript\nEcomIo.listBrands(callback, 0, 1000, 1, ['name'])\n```\n\n```javascript\nEcomIo.listBrands(callback, null, null, null, null, 'limit=2&offset=4')\n```\n\n## Get Category\n`getCategory(callback, id)`\n\n[API reference](https:\/\/ecomstore.docs.apiary.io\/#reference\/categories\/specific-category\/read-category)\n\n> Method to read a category object by the ID.\n\n| Arguments | Type     | Required |\n| :---:     | :---:    | :---: |\n| callback  | Function | :heavy_check_mark: |\n| id        | String   | :heavy_check_mark: |\n\n```javascript\nEcomIo.getCategory(callback, 'f10000000000000000000001')\n```\n\n## Find Category By Slug\n`findCategoryBySlug(callback, slug)`\n\n[API reference](https:\/\/ecomstore.docs.apiary.io\/#reference\/categories\/all-categories\/find-categories)\n\n> Method to find and read a category by the slug.\n\n| Arguments | Type     | Required |\n| :---:     | :---:    | :---: |\n| callback  | Function | :heavy_check_mark: |\n| slug      | String   | :heavy_check_mark: |\n\n```javascript\nEcomIo.findCategoryBySlug(callback, 'category-four')\n```\n\n## List Categories\n`listCategories(callback, offset, limit, sort, fields, customQuery)`\n\n[API reference](https:\/\/ecomstore.docs.apiary.io\/#reference\/categories\/all-categories\/pagination-and-ordering)\n\n> Similar to [`listBrands`](#list-brands),\nbut listing store categories.\n\n| Arguments   | Type     | Required |\n| :---:       | :---:    | :---: |\n| callback    | Function | :heavy_check_mark: |\n| offset      | Number   | |\n| limit       | Number   | |\n| sort        | Number   | |\n| fields      | Array    | |\n| customQuery | String   | |\n\n```javascript\nEcomIo.listCategories(callback)\n```\n\n```javascript\nEcomIo.listCategories(callback, 0, 1000, 1, ['name'])\n```\n\n```javascript\nEcomIo.listCategories(callback, null, null, null, null, 'limit=2&offset=4')\n```\n\n## Get Collections\n`getCollection(callback, id)`\n\n[API reference](https:\/\/ecomstore.docs.apiary.io\/#reference\/collections\/specific-collection\/read-collection)\n\n> Method to read a collection object by the ID.\n\n| Arguments | Type     | Required |\n| :---:     | :---:    | :---: |\n| callback  | Function | :heavy_check_mark: |\n| id        | String   | :heavy_check_mark: |\n\n```javascript\nEcomIo.getCollection(callback, 'f10000000000000000000001')\n```\n\n## Find Collection By Slug\n`findCollectionBySlug(callback, slug)`\n\n[API reference](https:\/\/ecomstore.docs.apiary.io\/#reference\/collections\/all-collections\/find-collections)\n\n> Method to find and read a collection by the slug.\n\n| Arguments | Type     | Required |\n| :---:     | :---:    | :---: |\n| callback  | Function | :heavy_check_mark: |\n| slug      | String   | :heavy_check_mark: |\n\n```javascript\nEcomIo.findCollectionBySlug(callback, 'special-collection')\n```\n\n## List Collections\n`listCollections(callback, offset, limit, sort, fields, customQuery)`\n\n[API reference](https:\/\/ecomstore.docs.apiary.io\/#reference\/collections\/all-collections\/pagination-and-ordering)\n\n> Similar to [`listBrands`](#list-brands),\nbut listing store collections.\n\n| Arguments   | Type     | Required |\n| :---:       | :---:    | :---: |\n| callback    | Function | :heavy_check_mark: |\n| offset      | Number   | |\n| limit       | Number   | |\n| sort        | Number   | |\n| fields      | Array    | |\n| customQuery | String   | |\n\n```javascript\nEcomIo.listCollections(callback)\n```\n\n```javascript\nEcomIo.listCollections(callback, 0, 1000, 1, ['name'])\n```\n\n```javascript\nEcomIo.listCollections(callback, null, null, null, null, 'limit=2&offset=4')\n```\n\n## Search Products\n`searchProducts(callback, term, from, size, sort, specs, ids, brands, categories, prices, customDsl)`\n\n[API reference](https:\/\/ecomsearch.docs.apiary.io\/#reference\/items\/items-search\/complex-search)\n\nThis method calls [E-Com Plus Search API](https:\/\/ecomsearch.docs.apiary.io\/#),\nthat proxy pass all requests to Elasticsearch\n[Search APIs](https:\/\/www.elastic.co\/guide\/en\/elasticsearch\/reference\/current\/search.html)\nwith `XGET` HTTP verb (read only). Responses are the same as returned from _Elasticsearch REST API_,\nso you can read their documentation to get more info and examples.\n\nYou must follow\n[Request Body Search](https:\/\/www.elastic.co\/guide\/en\/elasticsearch\/reference\/current\/search-request-body.html)\nspecifications and this\n[type mapping](https:\/\/ecomsearch.docs.apiary.io\/#reference\/items) reference.\n\n| Arguments  | Type     | Required           | Default | Description |\n| :---:      | :---:    | :---:              | :---:   | :---: |\n| callback   | Function | :heavy_check_mark: |         | [Callback function](#callback) |\n| term       | String   |                    |         | Term that you are searching for |\n| from       | number   |                    | 0       | Results offset number |\n| size       | number   |                    | 24      | Maximum number of results |\n| sort       | number   |                    | 0       | Results ordering, default is by views |\n| specs      | Object   |                    |         | Filter results by item specifications |\n| ids        | Array    |                    |         | Filter results by product IDs |\n| brands     | Array    |                    |         | Filter results by brands |\n| categories | Array    |                    |         | Filter results by categories |\n| prices     | Object   |                    |         | Filter results by prices `min` and `max` |\n| customDsl  | Object   |                    |         | Custom search request body |\n\n```javascript\n\/\/ list trending items\nEcomIo.searchProducts(callback)\n```\n\n### Term\nWe use a\n[multi match query](https:\/\/www.elastic.co\/guide\/en\/elasticsearch\/reference\/current\/query-dsl-multi-match-query.html)\nto search specified `term` in two fields,\nthe `name` and `keywords` of each product.\n\n```javascript\n\/\/ search product by term\nEcomIo.searchProducts(callback, 'tshirt')\n```\n\n### Sort\nThe `sort` argument is based on\n[sort](https:\/\/www.elastic.co\/guide\/en\/elasticsearch\/reference\/current\/search-request-sort.html)\nfrom Elasticsearch documentation.\n\nThe order that the resultant products will be sort is:\n\n1. The available products;\n2. Search score;\n3. The products with more ad relevance;\n4. Sort option.\n\nDefault enumered `sort` options:\n\n| Number | Field | Usage |\n| :---:  | :---: | :---: |\n| 0      | views | Sort by popularity, products with more page views will appear first |\n| 1      | sales | Sort by sales, products that sells more will appear first |\n| 2      | price | Sort by price ascending, products with lowest price will appear first |\n| 3      | price | Sort by price descending, products with highest price will appear first |\n\nIf `sort` argument is undefined or null, default is to sort by `views`.\n\n### Specs\nThe `specs` argument should be an\nobject with specifications properties that we use to filter the search.\nThe key is the specifications name and the value is an array\nwith the specifications values.\n\n```javascript\n\/\/ sample specs object\nlet specs = {\n  'color': [ 'blue', 'red' ],\n  'size': [ 'G' ]\n}\n```\n\n### IDs\nThe `ids` argument should be an array of products IDs to filter the search.\nIf used, only the products of specified object ID(s) will be returned.\n\n```javascript\n\/\/ sample ids array\nlet ids = [\n  '1234567890abcdef01291510',\n  '1234567890abcdef01291511',\n  '1234567890abcdef01291512'\n]\n```\n\n### Brands\nThe `brands` argument should be an array of brands IDs to filter the search.\nIf used, only products of specified brand(s) will be returned.\n\n```javascript\n\/\/ sample brands array\nlet brands = [\n  'a10000000000000000001110',\n  'a10000000000000000001111'\n]\n```\n\n### Categories\nThe `categories` argument should be an array of categories IDs to filter the search.\nIf used, only products of specified categorie(s) will be returned.\n\n```javascript\n\/\/ sample categories array\nlet categories = [\n  'b10000000000000000001110',\n  'b10000000000000000001111'\n]\n```\n\n### Prices\nThe prices argument should be an object to filter search by price range.\nYou can pass the minimum and the maximum prices.\n\nIt's based on\n[Range query](https:\/\/www.elastic.co\/guide\/en\/elasticsearch\/reference\/current\/query-dsl-range-query.html)\nfrom Elasticsearch documentation.\n\n```javascript\n\/\/ sample prices object\nlet prices = {\n  'min': 10,\n  'max': 100\n}\n```\n\n### Custom DSL\nThe `customDsl` is an object that you can pass\nto run your own Elasticsearch\n[Query DSL](https:\/\/www.elastic.co\/guide\/en\/elasticsearch\/reference\/current\/query-dsl.html).\n\nIt must be a valid\n[Request Body Search](https:\/\/www.elastic.co\/guide\/en\/elasticsearch\/reference\/current\/search-request-body.html).\n\n## Get Recommended Products\n`getRecommendedProducts(callback, id)`\n\n[API reference](https:\/\/ecomgraphs.docs.apiary.io\/#reference\/products\/recommended\/list-recommended-items)\n\n> Method to get a list of products to recommend together with one reference product.\n\n| Arguments | Type     | Required |\n| :---:     | :---:    | :---: |\n| callback  | Function | :heavy_check_mark: |\n| id        | String   | :heavy_check_mark: |\n\nReturns up to 12 recommended products, selecting the products that was more\ntimes bought together with the reference product.\nYou should use it to do something like \"who bought it, bought too\".\n\n```javascript\nEcomIo.getRecommendedProducts(callback, 'a00000000000000000000000')\n```\n\n## Get Related Products\n`getRelatedProducts(callback, id)`\n\n[API reference](https:\/\/ecomgraphs.docs.apiary.io\/#reference\/products\/related\/list-related-items)\n\n> Method to get a list of products similar to one reference product.\n\n| Arguments | Type     | Required |\n| :---:     | :---:    | :---: |\n| callback  | Function | :heavy_check_mark: |\n| id        | String   | :heavy_check_mark: |\n\nReturns up to 12 related products, selecting the products that have more categories\nin common with the reference product.\nYou should use it to do something like \"you can also be interested by\".\n\n```javascript\nEcomIo.getRelatedProducts(callback, 'a00000000000000000000000')\n```\n\n## Map By Slug\n`mapBySlug(callback, slug)`\n\n> Method to discouver the respective resource and ID by the page slug.\n\n| Arguments | Type     | Required |\n| :---:     | :---:    | :---: |\n| callback  | Function | :heavy_check_mark: |\n| slug      | String   | :heavy_check_mark: |\n\n```javascript\nEcomIo.mapBySlug(callback, 'product-sample-slug')\n```\n\nExample of returned `body`:\n\n```javascript\n{\n  'resource': 'products',\n  '_id': '123a5432109876543210cdef'\n}\n```\n\n## Map By Window URI\n`mapByWindowUri(callback)`\n\n> Does the same as [`mapBySlug`](#map-by-slug), but sets slug automaticlly\nfrom `window.location`.\n\n| Arguments | Type     | Required |\n| :---:     | :---:    | :---: |\n| callback  | Function | :heavy_check_mark: |\n\n**This method is available client side only (JS on browser)**\n\n```javascript\nEcomIo.mapByWindowUri(callback)\n```\n\n## Get Any By ID\n`getById(callback, resource, id)`\n\n> Wildcard method to read any public resource\nobject from [Store API](https:\/\/ecomstore.docs.apiary.io\/) by the ID.\n\n| Arguments | Type     | Required |\n| :---:     | :---:    | :---: |\n| callback  | Function | :heavy_check_mark: |\n| resource  | String   | :heavy_check_mark: |\n| id        | String   | :heavy_check_mark: |\n\n```javascript\nEcomIo.getById(callback, 'products', '123a5432109876543210cdef')\n```\n"
}
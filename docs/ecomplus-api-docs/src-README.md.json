{
    "repo": "ecomplus-api-docs",
    "path": "src\/README.md",
    "markdown": "# E-Com Plus Store API\n\n[E-Com Plus](https:\/\/www.e-com.plus)\nis a robust and flexible cloud commerce software,\ntotally based on REST APIs, providing a large library of methods and specifications\nto deploy any digital commerce operation easly\n\n**Store API** is the hearth of our software, a REST interface to the\n[MongoDB](https:\/\/www.mongodb.com\/) stores database,\ngiven full access to all store data, so be creative, but be careful too\n\n_With great power comes great responsibility_, _may the force be with you_!\n\n## Overview\n\nThis API tries to be truly *RESTful*, following Web API Standards, taking as specifications references:\n\n- https:\/\/github.com\/WhiteHouse\/api-standards\n- https:\/\/www.w3.org\/Protocols\/rfc2616\/rfc2616-sec10.html\n\n### Host\n\nShould be accessed from `https:\/\/api.e-com.plus\/{version}\/`\n\nCurrent version: **v1**\n\nhttps:\/\/api.e-com.plus\/v1\/\n\nNote that every request must be with `https` (SSL)\n\nAll endpoints will end with `.json`:\n\nhttps:\/\/api.e-com.plus\/v1\/example.json\n\n### Sandbox\n\nSandbox environment is available at `https:\/\/sandbox.e-com.plus\/{version}\/`,\nmust be used for tests only, after homologation you should migrate to\n[production](#introduction\/overview\/host)\n\nCurrent version and formats will always be the same of\n[production environment](#introduction\/overview\/host)\n\n**All data in the sandbox environment is deleted after 7 days**\n\nThis documentation uses sandbox by reference on the examples\n\n### Format\n\nBoth request and response body are formatted as JSON, always an object `{}`\n\n#### Object Modeling\n\nBased on [JSON Schema](http:\/\/json-schema.org\/) Draft-06 specifications\n\nAPI uses JSON Schema\n[built-in string formats](https:\/\/spacetelescope.github.io\/understanding-json-schema\/reference\/string.html#built-in-formats)\nand [Regular Expressions](https:\/\/regexr.com\/) (RegEx) to validate string fields on body\n\nFor example purposes, you can generate random objects with the schemas using\n[JSON Schema Faker](http:\/\/json-schema-faker.js.org\/)\n\n#### List Of Documents\n\nAt root of a resource or an embedded documents subresource, response body will follow this pattern:\n\n- Always an object with *meta* and *result* properties\n- `meta` is an object\n- `result` is an array of objects\n\n```json\n{\n  \"meta\": {\n  },\n  \"result\": [\n    {}, {}\n  ]\n}\n```\n\n### URL Params\n\nURL parameters (query string) are used only at endpoints that returns\n[lists of documents](#introduction\/overview\/format),\nsetting metadata (`meta`) for filtering and pagination purposes, accepted params will vary by each endpoint\n\n#### Common Parameters\n\n- *limit*\n    - Set the maximum number of documents to return\n    - Must be an integer > 0\n    - eg.: `?limit=1000`\n- *offset*\n    - Specifies the first entry to return\n    - An integer >= 0\n    - eg.: `?offset=1000`, `?offset=0`\n- *sort*\n    - Specifies rules to order the resultant objects\n    - Default is ascending order, use - for descending\n    - eg.: `?sort=-popularity`, `?sort=price,-popularity`\n- *fields*\n    - Specifies the object properties to return\n    - eg.: `?fields=code`, `?fields=name,code,date`\n\nOther parameters must be valid properties of the objects, will be used to filter results\n\nIt's possible to use\n[MongoDB dot notation](https:\/\/docs.mongodb.com\/manual\/core\/document\/#dot-notation)\nto filter by embedded arrays and objects\n\n### Headers\n\nAll requests must have the header `X-Store-ID` with the unique ID (integer) of respective store\n\nOptionally *X-Cache-Tag* with any value to refuse or update browser cache, *Content-Type*\n(*application\/json, charset=utf-8*) and *Accept-Encoding*\n\n### Verbs\n\n| Verb    | CRUD           | Description             |\n|:--------|----------------|-------------------------|\n| GET     | Read           | View object             |\n| POST    | Create         | Create new object       |\n| PATCH   | Update\/Modify  | Update some properties  |\n| PUT     | Update\/Replace | Overwrite entire object |\n| DELETE  | Delete         | Remove object           |\n| OPTIONS | -              | Return allowed methods  |\n\n### Authentication\n\nAuthentication is not required always, the majority of the resources accept GET requests\nwithout authentication, in some cases, authenticated requests return different body, more complete response\n\nOPTIONS requests are always public\n\nPOST, PATCH, PUT and DELETE always require authentication\n\n#### Authentication Headers\n\nYou must complete the [steps to authenticate](#reference\/authenticate-yourself),\nthen use the received *access_token* and *my_id* on headers `X-Access-Token` and `X-My-ID` respectively\n\n### Status Codes\n\nBased on HTTP\/1.1 Status Code Definitions:\n\n- *2xx* - Successful\n- *4xx* - Client error, must check the request\n- *5xx* - Server error, report us and try again later\n\n#### Response HTTP Status Code\n\n| Code  | Description  |\n|:------|--------------|\n| `200` | OK, successful GET request |\n| `201` | Created, successful POST request |\n| `202` | Accepted, at root (\/) only |\n| `204` | No content, successful PATCH, PUT or DELETE request |\n| `400` | Bad request, problem in request body or URL params |\n| `401` | Unauthorized, need authentication and permission |\n| `403` | Forbidden, plan limits reached or client blocked |\n| `404` | Not found, resource or ID doesn't exists |\n| `405` | Method not allowed, resource doesn't accept used verb |\n| `406` | Not acceptable, problem with resource ID or subresource |\n| `412` | Precondition failed, no store found with provided ID |\n| `417` | Expectation failed, missing some header |\n| `500` | Internal server error, please report and try again later |\n| `502` | Bad gateway, try again later |\n| `503` | Service unavailable, probably blocked by proxy, wait |\n| `504` | Gateway timeout, try again later |\n\n## Error Handling\n\n#### App Errors\n\nAll *4xx* (client error) and *5xx* (server error) responses from application\nwill have body following the model below:\n\n- *(object)*\n    - `status` *(number)* - HTTP status code\n    - `error_code` *(string, number)* - API error code\n    - `message` *(string)* - Message to developer\n    - `user_message` *(object)* - Messages to end user\n        - `en_us` *(string)*\n        - `pt_br` *(string)*\n    - `more_info` *(string, null)* - External link\n\n**Example**\n\n```json\n{\n  \"status\": 406,\n  \"error_code\": 123,\n  \"message\": \"Invalid value on resource ID\",\n  \"user_message\": {\n    \"en_us\": \"The informed ID is invalid\",\n    \"pt_br\": \"O ID informado \u00e9 inv\u00e1lido\"\n  },\n  \"more_info\": null\n}\n```\n\nTo know how to treat this errors, see\n[status codes reference](#introduction\/overview\/status-codes)\n\n#### Web Server Errors\n\nIn some cases you can receive an error directly from NGINX web server,\neven in this case the response will be a JSON object, almost in the same model\nof [App Errors](#introduction\/error-handling\/app-errors),\nbut without properties `user_message` and `more_info`,\nthe `error_code` will be an negative integer\n\n##### NGINX 404\n\n```json\n{\n  \"status\": 404,\n  \"error_code\": -44,\n  \"message\": \"Page not found\"\n}\n```\n\nIncorrect URL paths, check [API Host](#introduction\/overview\/host)\n\n##### NGINX 503\n\n```json\n{\n  \"status\": 503,\n  \"error_code\": -53,\n  \"message\": \"Service unavailable (DDoS?), wait few seconds\"\n}\n```\n\nNGINX is blocking your requests for security reasons, please wait few seconds and try again\n\n## Server Limits\n\nWhenever possible, **avoid using requests with query string**,\nthen you will be able to consume cache and send up to 30 _GET_ requests per second\nwith the same IP, to different endpoints\n\nNot cached responses are limited by default to 6 requests per IP per second, but it can vary (to low)\ndepending of the resource\n\nThe same API user (authentication) can make up to 6 authenticated requests per second\n\nIn almost all cases you will not receive an error if you go beyond the limits,\nthe response will only be delayed, but even so,\nwe recommend that you create treatments in case you receive a *503* status code\n\n## See Also\n\n- [Developers site](https:\/\/developers.e-com.plus)\n- [GitHub organization](https:\/\/github.com\/ecomclub)\n- [Community](https:\/\/community.e-com.plus)\n\n#### Other REST APIs\n\n- [Main](https:\/\/ecomplus.docs.apiary.io):\nE-Com Plus Main API, with some public data about stores and channels\n- [Graphs](https:\/\/ecomgraphs.docs.apiary.io):\nRecommendations API using Neo4j to define related products by categories, brands and common orders\n- [Search](https:\/\/ecomsearch.docs.apiary.io):\nPowerful text search API using Elasticsearch to find and suggest items (products) and terms\n\n## Getting Help\n\nFeel free to get help or suggest alterations on\n[GitHub repo](https:\/\/github.com\/ecomclub\/ecomplus-api-docs) or by e-mail\n[ti@e-com.club](mailto:ti@e-com.club)\n\n:[](authenticate-yourself\/blueprint.apib)\n\n:[](authenticate-app\/blueprint.apib)\n\n:[](products\/blueprint.apib)\n\n:[](brands\/blueprint.apib)\n\n:[](categories\/blueprint.apib)\n\n:[](collections\/blueprint.apib)\n\n:[](grids\/blueprint.apib)\n\n:[](customers\/blueprint.apib)\n\n:[](carts\/blueprint.apib)\n\n:[](orders\/blueprint.apib)\n\n:[](applications\/blueprint.apib)\n\n:[](triggers\/blueprint.apib)\n\n:[](procedures\/blueprint.apib)\n\n:[](stores\/blueprint.apib)\n\n:[](authentications\/blueprint.apib)\n"
}
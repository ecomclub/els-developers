{
    "repo": "ecomplus-search-api-docs",
    "path": "src\/README.md",
    "markdown": "# E-Com Plus Search API\n\n[E-Com Plus](https:\/\/www.e-com.plus)\nis a robust and flexible cloud commerce software,\ntotally based on REST APIs, providing a large library of methods and specifications\nto deploy any digital commerce operation easly\n\n**Search API** is our public REST interface to\n[Elasticsearch](https:\/\/www.elastic.co\/products\/elasticsearch),\nimplemented as store search engine,\nfor faster and flexible products and terms searches\n\n## Overview\n\nAll requests are proxy passed to Elasticsearch\n[Search APIs](https:\/\/www.elastic.co\/guide\/en\/elasticsearch\/reference\/current\/search.html)\nwith _XGET_ method (read only)\n\nYou must follow\n[Request Body Search](https:\/\/www.elastic.co\/guide\/en\/elasticsearch\/reference\/current\/search-request-body.html)\nspecifications\n\nResponses are the same as returned from _Eslasticsearch REST API_,\nso you can read their documentation to get more info and examples\n\n### Host\n\nShould be accessed from `https:\/\/apx-search.e-com.plus\/api\/{version}\/`\n\nCurrent version: **v1**\n\nhttps:\/\/apx-search.e-com.plus\/api\/v1\/\n\nNote that every request must be with `https` (SSL)\n\nAll endpoints will end with `.json`:\n\nhttps:\/\/apx-search.e-com.plus\/api\/v1\/example.json\n\n### Verbs\n\n| Verb    | CRUD           | Description             |\n|:--------|----------------|-------------------------|\n| GET     | Read           | View object             |\n| POST    | Read           | View object             |\n\n### Status Codes\n\nBased on HTTP\/1.1 Status Code Definitions:\n\n- *2xx* - Successful\n- *4xx* - Client error, must check the request\n- *5xx* - Server error, report us and try again later\n\n### Format\n\nBoth request and response body are formatted as JSON, always an object `{}`\n\nCheck\n[this page](https:\/\/www.elastic.co\/guide\/en\/elasticsearch\/reference\/current\/search-request-body.html)\nof Elasticsearch documentation to examples of successful responses\n\n## Error Handling\n\n#### ELS Errors\n\nAll *4xx* (client error) and *5xx* (server error) responses from Elasticsearch\nwill have body following the model below:\n\n- *(object)*\n    - `error` *(object)* - ELS error object\n        - `root_cause` *(array)*\n            - *(object)*\n                - `type` *(string)*\n                - `reason` *(string)*\n                - `resource.type` *(string)*\n                - `resource.id` *(string)*\n                - `index` *(string)*\n        - `type` *(string)*\n        - `reason` *(string)*\n        - `resource.type` *(string)*\n        - `resource.id` *(string)*\n        - `index` *(string)*\n    - `status` *(number)* - HTTP status code\n\n**Example**\n\n```json\n{\n  \"error\": {\n    \"root_cause\": [\n      {\n        \"type\": \"index_not_found_exception\",\n        \"reason\": \"no such index\",\n        \"resource.type\": \"index_or_alias\",\n        \"resource.id\": \"items\",\n        \"index\": \"items\"\n      }\n    ],\n    \"type\": \"index_not_found_exception\",\n    \"reason\": \"no such index\",\n    \"resource.type\": \"index_or_alias\",\n    \"resource.id\": \"items\",\n    \"index\": \"items\"\n  },\n  \"status\": 404\n}\n```\n\n#### Web Server Errors\n\nIn some cases you can receive an error directly from NGINX web server,\neven in this case the response will be a JSON object\n\n##### NGINX 404\n\n```json\n{\n  \"status\": 404,\n  \"error_code\": -44,\n  \"message\": \"Page not found\"\n}\n```\n\nIncorrect URL paths, check [API Host](#introduction\/overview\/host)\n\n##### NGINX 503\n\n```json\n{\n  \"status\": 503,\n  \"error_code\": -53,\n  \"message\": \"Service unavailable (DDoS?), wait few seconds\"\n}\n```\n\nNGINX is blocking your requests for security reasons, please wait few seconds and try again\n\n## Server Limits\n\nResponses are limited to 30 requests per IP per second\n\nIf the server is overloaded with too many pending connections,\nit will respond with *503* status code,\nso you **need to create treatments** for this case\n\nWe recommend to wait 400ms after a 503 response,\nthen resend the request\n\n## See Also\n\n- [Developers site](https:\/\/developers.e-com.plus)\n- [GitHub organization](https:\/\/github.com\/ecomclub)\n- [Community](https:\/\/community.e-com.plus)\n\n#### Other REST APIs\n\n- [Store](https:\/\/ecomstore.docs.apiary.io):\nE-Com Plus Store API, with all store resources\n- [Main](https:\/\/ecomplus.docs.apiary.io):\nE-Com Plus Main API, with some public data about stores and channels\n- [Graphs](https:\/\/ecomgraphs.docs.apiary.io):\nRecommendations API using Neo4j to define related products by categories, brands and common orders\n\n## Getting Help\n\nFeel free to get help or suggest alterations on\n[GitHub repo](https:\/\/github.com\/ecomclub\/ecomplus-api-docs) or by e-mail\n[ti@e-com.club](mailto:ti@e-com.club)\n\n:[](items\/blueprint.apib)\n\n:[](terms\/blueprint.apib)\n"
}